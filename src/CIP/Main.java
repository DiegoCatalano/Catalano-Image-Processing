/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package CIP;

import CIP.FiltersWindow.AddWindow;
import CIP.FiltersWindow.CannyEdgeDetectorWindow;
import CIP.FiltersWindow.ThresholdWindow;
import CIP.FiltersWindow.GaussianBlurWindow;
import CIP.FiltersWindow.HistogramShrinkWindow;
import CIP.FiltersWindow.HistogramStretchWindow;
import CIP.FiltersWindow.ImageQuantizationWindow;
import CIP.FiltersWindow.IntersectWindow;
import CIP.FiltersWindow.IsoDataClassifierWindow;
import CIP.FiltersWindow.MaximumWindow;
import CIP.FiltersWindow.MedianWindow;
import CIP.FiltersWindow.MergeWindow;
import CIP.FiltersWindow.MinimumWindow;
import CIP.FiltersWindow.MorphWindow;
import CIP.FiltersWindow.SaltAndPepperWindow;
import CIP.FiltersWindow.SubtractWindow;
import Catalano.Imaging.FastBitmap;
import Catalano.Imaging.Filters.Blur;
import Catalano.Imaging.Filters.BradleyLocalThreshold;
import Catalano.Imaging.Filters.DifferenceEdgeDetector;
import Catalano.Imaging.Filters.Grayscale;
import Catalano.Imaging.Filters.HistogramEqualization;
import Catalano.Imaging.Filters.Invert;
import Catalano.Imaging.Filters.MaximumEntropyThreshold;
import Catalano.Imaging.Filters.Mirror;
import Catalano.Imaging.Filters.OtsuThreshold;
import Catalano.Imaging.Filters.RGChromaticity;
import Catalano.Imaging.Filters.RotateChannels;
import Catalano.Imaging.Filters.Sharpen;
import Catalano.Imaging.Filters.SobelEdgeDetector;
import Catalano.Imaging.Filters.WhitePatch;
import Catalano.Imaging.IBaseInPlace;
import Catalano.Imaging.Unofficial.GrayWorld;
import Catalano.Imaging.Unofficial.IsotropicCompassEdgeDetector;
import Catalano.Imaging.Unofficial.KirschCompassEdgeDetector;
import Catalano.Imaging.Unofficial.PrewittCompassEdgeDetector;
import Catalano.Imaging.Unofficial.RobinsonCompassEdgeDetector;
import Catalano.Imaging.Unofficial.ScharrCompassEdgeDetector;
import Catalano.Imaging.Unofficial.SobelCompassEdgeDetector;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Diego
 */
public class Main extends javax.swing.JFrame {
    
    private static FastBitmap[] fb = new FastBitmap[256];
    
    private static JLabel label = new JLabel();
    private static JScrollPane panel;
    private static JViewport jv;
    
    private static int nImages = 0;
    private static boolean keepImage = false;
    private String oldPath;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        CenterScreen();
    }
    
    private void CenterScreen(){
        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;

        // Move the window
        this.setLocation(x, y);
    }
    
    public static void ApplyFilter(IBaseInPlace apply){
        int n = tabPane.getSelectedIndex();
        ApplyFilter(apply, n);
    }
    
    public static void ApplyFilter(IBaseInPlace apply, int indexImage){
        
        if(indexImage >= 0){
            if (keepImage){
                apply.applyInPlace(fb[indexImage]);
                label = new JLabel(fb[indexImage].toIcon());
                panel = (JScrollPane)tabPane.getComponent(indexImage);
                jv = panel.getViewport();
                jv.add(label);
            }
            else{
                FastBitmap temp = new FastBitmap(fb[indexImage]);
                apply.applyInPlace(temp);
                fb[nImages] = new FastBitmap(temp);
                label = new JLabel(fb[nImages].toIcon());
                panel = new JScrollPane(label);
                tabPane.add("Image " + ++nImages, panel);
                tabPane.setSelectedIndex(nImages-1);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Select an image.", "Catalano Image Processing", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void LoadConfig(int indexImage){
        
        String size = fb[indexImage].getWidth() + "x" + fb[indexImage].getHeight();
        lblSize.setText(size);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        toolGrayscale = new javax.swing.JButton();
        tabPane = new javax.swing.JTabbedPane();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        lblSize = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        lblPosition = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu20 = new javax.swing.JMenu();
        mnuGrayWorld = new javax.swing.JMenuItem();
        mnuWhitePatch = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        mnuRotateChannel = new javax.swing.JMenuItem();
        mnuRGChromaticity = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        mnuMinimum = new javax.swing.JMenuItem();
        mnuMaximum = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        mnuAddFilter = new javax.swing.JMenuItem();
        mnuSubtract = new javax.swing.JMenuItem();
        mnuMerge = new javax.swing.JMenuItem();
        mnuIntersect = new javax.swing.JMenuItem();
        mnuMorph = new javax.swing.JMenuItem();
        jMenu16 = new javax.swing.JMenu();
        mnuHistogramStretch = new javax.swing.JMenuItem();
        mnuHistogramShrink = new javax.swing.JMenuItem();
        mnuHistogramEqualization = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        mnuIsotropicCompass = new javax.swing.JMenuItem();
        mnuKirschCompass = new javax.swing.JMenuItem();
        mnuPrewittCompass = new javax.swing.JMenuItem();
        mnuRobinsonCompass = new javax.swing.JMenuItem();
        mnuScharr = new javax.swing.JMenuItem();
        mnuSobelCompass = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        mnuCannyEdgeDetector = new javax.swing.JMenuItem();
        mnuDifferenceEdgeDetector = new javax.swing.JMenuItem();
        mnuSobelEdgeDetector = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        mnuBlur = new javax.swing.JMenuItem();
        mnuGaussianBlur = new javax.swing.JMenuItem();
        mnuSharpen = new javax.swing.JMenuItem();
        mnuInvert = new javax.swing.JMenuItem();
        mnuMedian = new javax.swing.JMenuItem();
        jMenu18 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        mnuThreshold = new javax.swing.JMenuItem();
        mnuOtsuThreshold = new javax.swing.JMenuItem();
        mnuMaximumEntropyThreshold = new javax.swing.JMenuItem();
        mnuBradleyLocalThreshold = new javax.swing.JMenuItem();
        jMenu17 = new javax.swing.JMenu();
        mnuImageQuantization = new javax.swing.JMenuItem();
        mnuIsoDataClassifier = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        mnuSaltAndPepper = new javax.swing.JMenuItem();
        jMenu19 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        mnuMirrorX = new javax.swing.JMenuItem();
        mnuMirrorY = new javax.swing.JMenuItem();
        mnuMirrorXY = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        mnuNewImage = new javax.swing.JCheckBoxMenuItem();
        mnuClearAll = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Catalano Image Processing 0.6");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        toolGrayscale.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        toolGrayscale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/degrade.png"))); // NOI18N
        toolGrayscale.setText("Grayscale ");
        toolGrayscale.setToolTipText("Convert an image in grayscale.");
        toolGrayscale.setAlignmentX(0.5F);
        toolGrayscale.setFocusable(false);
        toolGrayscale.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolGrayscale.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolGrayscaleActionPerformed(evt);
            }
        });
        jToolBar1.add(toolGrayscale);

        tabPane.setAutoscrolls(true);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel1.setText("Size: ");
        jToolBar2.add(jLabel1);

        lblSize.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        lblSize.setText("0x0");
        jToolBar2.add(lblSize);
        jToolBar2.add(jSeparator1);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel2.setText("Point: ");
        jToolBar2.add(jLabel2);

        lblPosition.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        lblPosition.setText("I: 0, J: 0");
        jToolBar2.add(lblPosition);

        jMenu1.setText("File");

        mnuOpen.setText("Open image");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);

        jMenuItem2.setText("Save image");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Save image as...");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filters");

        jMenu3.setText("Color");

        jMenu20.setText("Color Constancy");

        mnuGrayWorld.setText("Gray World");
        mnuGrayWorld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGrayWorldActionPerformed(evt);
            }
        });
        jMenu20.add(mnuGrayWorld);

        mnuWhitePatch.setText("White Patch");
        mnuWhitePatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuWhitePatchActionPerformed(evt);
            }
        });
        jMenu20.add(mnuWhitePatch);

        jMenuItem5.setText("Modified White Patch");
        jMenu20.add(jMenuItem5);

        jMenu3.add(jMenu20);

        mnuRotateChannel.setText("Rotate Channels");
        mnuRotateChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRotateChannelActionPerformed(evt);
            }
        });
        jMenu3.add(mnuRotateChannel);

        mnuRGChromaticity.setText("RG Chromaticity");
        mnuRGChromaticity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRGChromaticityActionPerformed(evt);
            }
        });
        jMenu3.add(mnuRGChromaticity);

        jMenu2.add(jMenu3);

        jMenu4.setText("Logic Operations");
        jMenu2.add(jMenu4);

        jMenu14.setText("Math Operations");

        mnuMinimum.setText("Minimum");
        mnuMinimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMinimumActionPerformed(evt);
            }
        });
        jMenu14.add(mnuMinimum);

        mnuMaximum.setText("Maximum");
        mnuMaximum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMaximumActionPerformed(evt);
            }
        });
        jMenu14.add(mnuMaximum);

        jMenu2.add(jMenu14);

        jMenu5.setText("Two source images");

        mnuAddFilter.setText("Add");
        mnuAddFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddFilterActionPerformed(evt);
            }
        });
        jMenu5.add(mnuAddFilter);

        mnuSubtract.setText("Subtract");
        mnuSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSubtractActionPerformed(evt);
            }
        });
        jMenu5.add(mnuSubtract);

        mnuMerge.setText("Merge");
        mnuMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMergeActionPerformed(evt);
            }
        });
        jMenu5.add(mnuMerge);

        mnuIntersect.setText("Intersect");
        mnuIntersect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIntersectActionPerformed(evt);
            }
        });
        jMenu5.add(mnuIntersect);

        mnuMorph.setText("Morph");
        mnuMorph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMorphActionPerformed(evt);
            }
        });
        jMenu5.add(mnuMorph);

        jMenu2.add(jMenu5);

        jMenu16.setText("Histogram");

        mnuHistogramStretch.setText("Histogram Stretch");
        mnuHistogramStretch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHistogramStretchActionPerformed(evt);
            }
        });
        jMenu16.add(mnuHistogramStretch);

        mnuHistogramShrink.setText("Histogram Shrink");
        mnuHistogramShrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHistogramShrinkActionPerformed(evt);
            }
        });
        jMenu16.add(mnuHistogramShrink);

        mnuHistogramEqualization.setText("Histogram Equalization");
        mnuHistogramEqualization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHistogramEqualizationActionPerformed(evt);
            }
        });
        jMenu16.add(mnuHistogramEqualization);

        jMenu2.add(jMenu16);

        jMenu12.setText("Compass Edge Detector");

        mnuIsotropicCompass.setText("Isotropic");
        mnuIsotropicCompass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIsotropicCompassActionPerformed(evt);
            }
        });
        jMenu12.add(mnuIsotropicCompass);

        mnuKirschCompass.setText("Kirsch");
        mnuKirschCompass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKirschCompassActionPerformed(evt);
            }
        });
        jMenu12.add(mnuKirschCompass);

        mnuPrewittCompass.setText("Prewitt");
        mnuPrewittCompass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrewittCompassActionPerformed(evt);
            }
        });
        jMenu12.add(mnuPrewittCompass);

        mnuRobinsonCompass.setText("Robinson");
        mnuRobinsonCompass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRobinsonCompassActionPerformed(evt);
            }
        });
        jMenu12.add(mnuRobinsonCompass);

        mnuScharr.setText("Scharr");
        mnuScharr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuScharrActionPerformed(evt);
            }
        });
        jMenu12.add(mnuScharr);

        mnuSobelCompass.setText("Sobel");
        mnuSobelCompass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSobelCompassActionPerformed(evt);
            }
        });
        jMenu12.add(mnuSobelCompass);

        jMenu2.add(jMenu12);

        jMenu9.setText("Edge Detector");

        mnuCannyEdgeDetector.setText("Canny");
        mnuCannyEdgeDetector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCannyEdgeDetectorActionPerformed(evt);
            }
        });
        jMenu9.add(mnuCannyEdgeDetector);

        mnuDifferenceEdgeDetector.setText("Difference");
        mnuDifferenceEdgeDetector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDifferenceEdgeDetectorActionPerformed(evt);
            }
        });
        jMenu9.add(mnuDifferenceEdgeDetector);

        mnuSobelEdgeDetector.setText("Sobel");
        mnuSobelEdgeDetector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSobelEdgeDetectorActionPerformed(evt);
            }
        });
        jMenu9.add(mnuSobelEdgeDetector);

        jMenu2.add(jMenu9);

        jMenu11.setText("Common Filters");

        mnuBlur.setText("Blur");
        mnuBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBlurActionPerformed(evt);
            }
        });
        jMenu11.add(mnuBlur);

        mnuGaussianBlur.setText("Gaussian Blur");
        mnuGaussianBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGaussianBlurActionPerformed(evt);
            }
        });
        jMenu11.add(mnuGaussianBlur);

        mnuSharpen.setText("Sharpen");
        mnuSharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSharpenActionPerformed(evt);
            }
        });
        jMenu11.add(mnuSharpen);

        mnuInvert.setText("Invert");
        mnuInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInvertActionPerformed(evt);
            }
        });
        jMenu11.add(mnuInvert);

        mnuMedian.setText("Median");
        mnuMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMedianActionPerformed(evt);
            }
        });
        jMenu11.add(mnuMedian);

        jMenu2.add(jMenu11);

        jMenu18.setText("Morphology");
        jMenu2.add(jMenu18);

        jMenu13.setText("Threshold");

        mnuThreshold.setText("Threshold");
        mnuThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuThresholdActionPerformed(evt);
            }
        });
        jMenu13.add(mnuThreshold);

        mnuOtsuThreshold.setText("Otsu Threshold");
        mnuOtsuThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOtsuThresholdActionPerformed(evt);
            }
        });
        jMenu13.add(mnuOtsuThreshold);

        mnuMaximumEntropyThreshold.setText("Maximum Entropy Threshold");
        mnuMaximumEntropyThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMaximumEntropyThresholdActionPerformed(evt);
            }
        });
        jMenu13.add(mnuMaximumEntropyThreshold);

        mnuBradleyLocalThreshold.setText("Bradley Local Threshold");
        mnuBradleyLocalThreshold.setToolTipText("");
        mnuBradleyLocalThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBradleyLocalThresholdActionPerformed(evt);
            }
        });
        jMenu13.add(mnuBradleyLocalThreshold);

        jMenu2.add(jMenu13);

        jMenu17.setText("Segmentation");

        mnuImageQuantization.setText("Image Quantization");
        mnuImageQuantization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImageQuantizationActionPerformed(evt);
            }
        });
        jMenu17.add(mnuImageQuantization);

        mnuIsoDataClassifier.setText("Isodata Classifier");
        mnuIsoDataClassifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIsoDataClassifierActionPerformed(evt);
            }
        });
        jMenu17.add(mnuIsoDataClassifier);

        jMenuItem6.setText("Mean Shift");
        jMenu17.add(jMenuItem6);

        jMenu2.add(jMenu17);

        jMenu15.setText("Noise");

        mnuSaltAndPepper.setText("Salt and Pepper");
        mnuSaltAndPepper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaltAndPepperActionPerformed(evt);
            }
        });
        jMenu15.add(mnuSaltAndPepper);

        jMenu2.add(jMenu15);

        jMenuBar1.add(jMenu2);

        jMenu19.setText("Transforms");
        jMenuBar1.add(jMenu19);

        jMenu6.setText("Tools");

        jMenu10.setText("Mirror");

        mnuMirrorX.setText("X");
        mnuMirrorX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMirrorXActionPerformed(evt);
            }
        });
        jMenu10.add(mnuMirrorX);

        mnuMirrorY.setText("Y");
        mnuMirrorY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMirrorYActionPerformed(evt);
            }
        });
        jMenu10.add(mnuMirrorY);

        mnuMirrorXY.setText("XY");
        mnuMirrorXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMirrorXYActionPerformed(evt);
            }
        });
        jMenu10.add(mnuMirrorXY);

        jMenu6.add(jMenu10);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Options");

        mnuNewImage.setSelected(true);
        mnuNewImage.setText("Create new window after edit an image");
        mnuNewImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewImageActionPerformed(evt);
            }
        });
        jMenu7.add(mnuNewImage);

        mnuClearAll.setText("Clear All");
        mnuClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearAllActionPerformed(evt);
            }
        });
        jMenu7.add(mnuClearAll);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("About");

        jMenuItem8.setText("Help");
        jMenu8.add(jMenuItem8);

        jMenuItem9.setText("About");
        jMenu8.add(jMenuItem9);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
            .addComponent(tabPane)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        
        FileFilter ff = new FileNameExtensionFilter("Images", "jpg", "bmp", "png", "gif");
        
        JFileChooser file = new JFileChooser(oldPath);
        file.setAcceptAllFileFilterUsed(false);
        file.addChoosableFileFilter(ff);
        file.showOpenDialog(null);
        
        String pathname = file.getSelectedFile().getAbsolutePath();
        oldPath = pathname;
        
        fb[nImages] = new FastBitmap(pathname);
        
        label = new JLabel(fb[nImages].toIcon());
        panel = new JScrollPane(label);
        tabPane.addTab("Image " + ++nImages, panel);
        tabPane.setSelectedIndex(nImages-1);
        
        LoadConfig(nImages-1);
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void toolGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolGrayscaleActionPerformed
        int n = tabPane.getSelectedIndex();
        if (n >= 0){
            if (fb[n].isRGB())
                ApplyFilter(new Grayscale(), n);
            else
                JOptionPane.showMessageDialog(null, "The image only works in RGB", "Grayscale", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, "Select an image.", "Catalano Image Processing", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_toolGrayscaleActionPerformed

    private void mnuNewImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewImageActionPerformed
        
        if (mnuNewImage.isSelected())
            keepImage = false;
        else
            keepImage = true;
        
    }//GEN-LAST:event_mnuNewImageActionPerformed

    private void mnuSobelEdgeDetectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSobelEdgeDetectorActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            ApplyFilter(new SobelEdgeDetector(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in grayscale", "Sobel Edge Detector", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuSobelEdgeDetectorActionPerformed

    private void mnuMirrorXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMirrorXActionPerformed
        ApplyFilter(new Mirror(true, false));
    }//GEN-LAST:event_mnuMirrorXActionPerformed

    private void mnuMirrorYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMirrorYActionPerformed
        ApplyFilter(new Mirror(false, true));
    }//GEN-LAST:event_mnuMirrorYActionPerformed

    private void mnuMirrorXYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMirrorXYActionPerformed
        ApplyFilter(new Mirror(true, true));
    }//GEN-LAST:event_mnuMirrorXYActionPerformed

    private void mnuBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBlurActionPerformed
        ApplyFilter(new Blur());
    }//GEN-LAST:event_mnuBlurActionPerformed

    private void mnuSharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSharpenActionPerformed
        ApplyFilter(new Sharpen());
    }//GEN-LAST:event_mnuSharpenActionPerformed

    private void mnuInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInvertActionPerformed
        ApplyFilter(new Invert());
    }//GEN-LAST:event_mnuInvertActionPerformed

    private void mnuThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuThresholdActionPerformed
        ThresholdWindow tw = new ThresholdWindow();
        tw.setVisible(true);
    }//GEN-LAST:event_mnuThresholdActionPerformed

    private void mnuOtsuThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOtsuThresholdActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            ApplyFilter(new OtsuThreshold(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in grayscale", "Otsu Threshold", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuOtsuThresholdActionPerformed

    private void mnuBradleyLocalThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBradleyLocalThresholdActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            ApplyFilter(new BradleyLocalThreshold(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in grayscale", "Bradley Local Threshold", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuBradleyLocalThresholdActionPerformed

    private void mnuMaximumEntropyThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMaximumEntropyThresholdActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            ApplyFilter(new MaximumEntropyThreshold(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in grayscale", "Maximum Entropy Threshold", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuMaximumEntropyThresholdActionPerformed

    private void mnuGaussianBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGaussianBlurActionPerformed
        GaussianBlurWindow gbw = new GaussianBlurWindow();
        gbw.setVisible(true);
    }//GEN-LAST:event_mnuGaussianBlurActionPerformed

    private void mnuDifferenceEdgeDetectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDifferenceEdgeDetectorActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            ApplyFilter(new DifferenceEdgeDetector(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in grayscale", "Difference Edge Detector", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuDifferenceEdgeDetectorActionPerformed

    private void mnuCannyEdgeDetectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCannyEdgeDetectorActionPerformed
        CannyEdgeDetectorWindow cedw = new CannyEdgeDetectorWindow();
        cedw.setVisible(true);
    }//GEN-LAST:event_mnuCannyEdgeDetectorActionPerformed

    private void mnuMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMedianActionPerformed
        MedianWindow mw = new MedianWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_mnuMedianActionPerformed

    private void mnuSaltAndPepperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaltAndPepperActionPerformed
        SaltAndPepperWindow spw = new SaltAndPepperWindow();
        spw.setVisible(true);
    }//GEN-LAST:event_mnuSaltAndPepperActionPerformed

    private void mnuHistogramStretchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHistogramStretchActionPerformed
        HistogramStretchWindow hsw = new HistogramStretchWindow();
        hsw.setVisible(true);
    }//GEN-LAST:event_mnuHistogramStretchActionPerformed

    private void mnuHistogramEqualizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHistogramEqualizationActionPerformed
        int n = tabPane.getSelectedIndex();
        ApplyFilter(new HistogramEqualization(), n);
    }//GEN-LAST:event_mnuHistogramEqualizationActionPerformed

    private void mnuHistogramShrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHistogramShrinkActionPerformed
        HistogramShrinkWindow hsw = new HistogramShrinkWindow();
        hsw.setVisible(true);
    }//GEN-LAST:event_mnuHistogramShrinkActionPerformed

    private void mnuClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearAllActionPerformed
        tabPane.removeAll();
        nImages = 0;
    }//GEN-LAST:event_mnuClearAllActionPerformed

    private void mnuAddFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddFilterActionPerformed
        AddWindow aw = new AddWindow(tabPane, fb);
        aw.setVisible(true);
    }//GEN-LAST:event_mnuAddFilterActionPerformed

    private void mnuRotateChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRotateChannelActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isRGB())
            ApplyFilter(new RotateChannels(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in RGB images", "Rotate Channels", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuRotateChannelActionPerformed

    private void mnuSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSubtractActionPerformed
        SubtractWindow sw = new SubtractWindow(tabPane, fb);
        sw.setVisible(true);
    }//GEN-LAST:event_mnuSubtractActionPerformed

    private void mnuRGChromaticityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRGChromaticityActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isRGB())
            ApplyFilter(new RGChromaticity(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in RGB images", "RG Chromaticity", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuRGChromaticityActionPerformed

    private void mnuMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMergeActionPerformed
        MergeWindow mw = new MergeWindow(tabPane, fb);
        mw.setVisible(true);
    }//GEN-LAST:event_mnuMergeActionPerformed

    private void mnuIntersectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIntersectActionPerformed
        IntersectWindow iw = new IntersectWindow(tabPane, fb);
        iw.setVisible(true);
    }//GEN-LAST:event_mnuIntersectActionPerformed

    private void mnuMorphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMorphActionPerformed
        MorphWindow mw = new MorphWindow(tabPane, fb);
        mw.setVisible(true);
    }//GEN-LAST:event_mnuMorphActionPerformed

    private void mnuMaximumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMaximumActionPerformed
        MaximumWindow mw = new MaximumWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_mnuMaximumActionPerformed

    private void mnuMinimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMinimumActionPerformed
        MinimumWindow mw = new MinimumWindow();
        mw.setVisible(true);
    }//GEN-LAST:event_mnuMinimumActionPerformed

    private void mnuImageQuantizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImageQuantizationActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            new ImageQuantizationWindow().setVisible(true);
        else
            JOptionPane.showMessageDialog(null, "The image only works in Grayscale images", "Image Quantization", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuImageQuantizationActionPerformed

    private void mnuIsoDataClassifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIsoDataClassifierActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isGrayscale())
            new IsoDataClassifierWindow().setVisible(true);
        else
            JOptionPane.showMessageDialog(null, "The image only works in Grayscale images", "IsoData Classifier", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuIsoDataClassifierActionPerformed

    private void mnuKirschCompassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKirschCompassActionPerformed
        ApplyFilter(new KirschCompassEdgeDetector());
    }//GEN-LAST:event_mnuKirschCompassActionPerformed

    private void mnuPrewittCompassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrewittCompassActionPerformed
        ApplyFilter(new PrewittCompassEdgeDetector());
    }//GEN-LAST:event_mnuPrewittCompassActionPerformed

    private void mnuRobinsonCompassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRobinsonCompassActionPerformed
        ApplyFilter(new RobinsonCompassEdgeDetector());
    }//GEN-LAST:event_mnuRobinsonCompassActionPerformed

    private void mnuScharrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuScharrActionPerformed
        ApplyFilter(new ScharrCompassEdgeDetector());
    }//GEN-LAST:event_mnuScharrActionPerformed

    private void mnuIsotropicCompassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIsotropicCompassActionPerformed
        ApplyFilter(new IsotropicCompassEdgeDetector());
    }//GEN-LAST:event_mnuIsotropicCompassActionPerformed

    private void mnuSobelCompassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSobelCompassActionPerformed
        ApplyFilter(new SobelCompassEdgeDetector());
    }//GEN-LAST:event_mnuSobelCompassActionPerformed

    private void mnuGrayWorldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGrayWorldActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isRGB())
            ApplyFilter(new GrayWorld(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in RGB images", "Gray World", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuGrayWorldActionPerformed

    private void mnuWhitePatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuWhitePatchActionPerformed
        int n = tabPane.getSelectedIndex();
        if (fb[n].isRGB())
            ApplyFilter(new WhitePatch(), n);
        else
            JOptionPane.showMessageDialog(null, "The image only works in RGB images", "Gray World", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuWhitePatchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu18;
    private javax.swing.JMenu jMenu19;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu20;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblSize;
    private javax.swing.JMenuItem mnuAddFilter;
    private javax.swing.JMenuItem mnuBlur;
    private javax.swing.JMenuItem mnuBradleyLocalThreshold;
    private javax.swing.JMenuItem mnuCannyEdgeDetector;
    private javax.swing.JMenuItem mnuClearAll;
    private javax.swing.JMenuItem mnuDifferenceEdgeDetector;
    private javax.swing.JMenuItem mnuGaussianBlur;
    private javax.swing.JMenuItem mnuGrayWorld;
    private javax.swing.JMenuItem mnuHistogramEqualization;
    private javax.swing.JMenuItem mnuHistogramShrink;
    private javax.swing.JMenuItem mnuHistogramStretch;
    private javax.swing.JMenuItem mnuImageQuantization;
    private javax.swing.JMenuItem mnuIntersect;
    private javax.swing.JMenuItem mnuInvert;
    private javax.swing.JMenuItem mnuIsoDataClassifier;
    private javax.swing.JMenuItem mnuIsotropicCompass;
    private javax.swing.JMenuItem mnuKirschCompass;
    private javax.swing.JMenuItem mnuMaximum;
    private javax.swing.JMenuItem mnuMaximumEntropyThreshold;
    private javax.swing.JMenuItem mnuMedian;
    private javax.swing.JMenuItem mnuMerge;
    private javax.swing.JMenuItem mnuMinimum;
    private javax.swing.JMenuItem mnuMirrorX;
    private javax.swing.JMenuItem mnuMirrorXY;
    private javax.swing.JMenuItem mnuMirrorY;
    private javax.swing.JMenuItem mnuMorph;
    private javax.swing.JCheckBoxMenuItem mnuNewImage;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuOtsuThreshold;
    private javax.swing.JMenuItem mnuPrewittCompass;
    private javax.swing.JMenuItem mnuRGChromaticity;
    private javax.swing.JMenuItem mnuRobinsonCompass;
    private javax.swing.JMenuItem mnuRotateChannel;
    private javax.swing.JMenuItem mnuSaltAndPepper;
    private javax.swing.JMenuItem mnuScharr;
    private javax.swing.JMenuItem mnuSharpen;
    private javax.swing.JMenuItem mnuSobelCompass;
    private javax.swing.JMenuItem mnuSobelEdgeDetector;
    private javax.swing.JMenuItem mnuSubtract;
    private javax.swing.JMenuItem mnuThreshold;
    private javax.swing.JMenuItem mnuWhitePatch;
    public static javax.swing.JTabbedPane tabPane;
    private javax.swing.JButton toolGrayscale;
    // End of variables declaration//GEN-END:variables
}
